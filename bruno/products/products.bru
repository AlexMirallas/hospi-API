meta {
  name: Products
  type: http
  seq: 2
}

# Create Product
post http://localhost:3002/products {
  headers {
    Content-Type: application/json
    Authorization: Bearer {{token}}
  }
  body {
    "name": "Summer T-Shirt",
    "description": "Comfortable cotton T-shirt for summer",
    "brand": "FashionBrand",
    "category": "Clothing",
    "basePrice": 29.99,
    "variants": [
      {
        "size": "M",
        "color": "Blue",
        "stockQuantity": 100
      },
      {
        "size": "L",
        "color": "Red",
        "stockQuantity": 50,
        "variantPrice": 34.99
      }
    ]
  }
  tests {
    test("should create a new product") {
      expect(res.status).toBe(201)
      expect(res.body).toHaveProperty("id")
      expect(res.body.variants).toBeArray()
      expect(res.body.variants.length).toBe(2)
      bru.setEnvVar("productId", res.body.id)
    }
  }
}

# Get All Products
get http://localhost:3002/products {
  tests {
    test("should return list of products") {
      expect(res.status).toBe(200)
      expect(res.body).toBeArray()
    }
  }
}

# Get Product by ID
get http://localhost:3002/products/{{productId}} {
  tests {
    test("should return a specific product") {
      expect(res.status).toBe(200)
      expect(res.body.id).toBe(bru.getEnvVar("productId"))
      expect(res.body.variants).toBeArray()
    }
  }
}

# Update Product
put http://localhost:3002/products/{{productId}} {
  headers {
    Content-Type: application/json
    Authorization: Bearer {{token}}
  }
  body {
    "name": "Updated T-Shirt",
    "description": "Updated description",
    "basePrice": 39.99
  }
  tests {
    test("should update the product") {
      expect(res.status).toBe(200)
      expect(res.body.name).toBe("Updated T-Shirt")
      expect(res.body.basePrice).toBe(39.99)
    }
  }
}

# Delete Product
delete http://localhost:3002/products/{{productId}} {
  headers {
    Authorization: Bearer {{token}}
  }
  tests {
    test("should delete the product") {
      expect(res.status).toBe(200)
    }
  }
}
